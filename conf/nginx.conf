worker_processes  2;
error_log  logs/error.log  info; # 日志级别
events {
  worker_connections  1024;
}
http {
  default_type  application/octet-stream;
  access_log  logs/access.log;
  # 设置默认 lua 搜索路径，添加 lua 路径
  # 此处写相对路径时，对启动 nginx 的路径有要求，必须在 nginx 目录下启动，require 找不到
  # comm.param 绝对路径当然也没问题，但是不可移植，因此应使用变量 $prefix 或
  # ${prefix}，OR 会替换为 nginx 的 prefix path。
  lua_package_path '$prefix/luademo/?.lua;;';
  # 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。
  # 在生产环境上务必确保 lua_code_cache 设置成 on。
  lua_code_cache off;
  server{
    listen 80;
    location /test {
      content_by_lua_file luademo/getUriParam/useCosocket.lua;
    }
  }

  server{
    listen 81;
    location /spe_md5 {
      content_by_lua_file luademo/getUriParam/spe_md5.lua;
    }
  }

  server {
    listen       8001;
    server_name  localhost;
    default_type text/html;
#    location = /favicon.ico {
#      log_not_found off;
#      access_log off;
#    }
    # 在代码路径中使用nginx变量
    location ~ ^/api/([-_a-zA-Z0-9/]+) {
      # 准入阶段完成参数验证,名称不加access会404
#      access_by_lua_file  luademo/comm/access_cheakNum.lua;
#      内容生成阶段
      content_by_lua_file luademo/$1.lua;
    }
#    location /hello {
#      content_by_lua_file luademo/hello.lua;
#    }
#    location = /sum {
#      # 只允许内部调用
#      internal;
#
#      content_by_lua_file luademo/useLocation/sum.lua;
#    }
#    location = /subduction {
#      # 只允许内部调用
#      internal;
#      content_by_lua_file luademo/useLocation/subduction.lua;
#    }
#    location = /app/test {
#      content_by_lua_file luademo/useLocation/test.lua;
#    }
#    location = /app/test_parallels {
#      content_by_lua_file luademo/useLocation/test_parallels.lua;
#    }
#    location = /app/test_queue {
#      content_by_lua_file luademo/useLocation/test_queue.lua;
#    }
#    location = /get/print_param {
#      content_by_lua_file luademo/getUriParam/printParam.lua;
#    }location = /get/test {
#      content_by_lua_file luademo/getUriParam/test.lua;
#    }
  }
}